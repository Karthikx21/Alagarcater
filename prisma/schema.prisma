// Prisma schema for AlgarCatering PostgreSQL migration
// Run: npx prisma migrate dev --name init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id          Int      @id @default(autoincrement())
  name        String
  mobile      String   @unique
  address     String?
  notes       String?
  orders      Order[]
  createdAt   DateTime @default(now())

  @@index([mobile])
}

model Order {
  id            Int             @id @default(autoincrement())
  orderId       String          @unique
  customer      Customer        @relation(fields: [customerId], references: [id])
  customerId    Int
  guestCount    Int
  eventDate     DateTime
  selectedItems Json
  subtotal      Decimal
  serviceCharge Decimal
  gst           Decimal
  total         Decimal
  status        String          @default("new") // 'new' | 'confirmed' | 'preparing' | 'ready' | 'delivered' | 'cancelled'
  paymentStatus String          @default("due") // 'due' | 'partial' | 'paid'
  amountPaid    Decimal         @default(0)
  amountDue     Decimal         @default(0)
  notes         String?
  lastModified  DateTime        @default(now()) @updatedAt
  createdAt     DateTime        @default(now())
  payments      PaymentRecord[]

  @@index([eventDate])
  @@index([status])
}

model MenuItem {
  id                  Int      @id @default(autoincrement())
  name                String
  tamilName           String
  category            String
  subcategory         String?
  type                String
  price               Decimal
  description         String?
  customizationOptions Json?
  isActive            Boolean  @default(true)
  createdAt           DateTime @default(now())
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  action    String   // create, update, delete
  entity    String   // order, customer, menuItem
  entityId  Int
  userId    Int?
  details   Json?
  createdAt DateTime @default(now())
}

model User {
  id        String   @id @default(uuid())
  name      String?
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sessions  Session[]
}

model Session {
  id           String   @id @default(uuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model PaymentRecord {
  id          Int      @id @default(autoincrement())
  order       Order    @relation(fields: [orderId], references: [id])
  orderId     Int
  amount      Decimal
  paymentDate DateTime @default(now())
  paymentMethod String  // 'cash', 'card', 'bank_transfer', 'upi', etc.
  notes       String?
  receiptNumber String?
  createdAt   DateTime @default(now())
}
